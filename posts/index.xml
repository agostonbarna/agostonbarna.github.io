<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Barna's blog</title><link>https://agostonbarna.github.io/posts/</link><description>Recent content in Posts on Barna's blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 30 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://agostonbarna.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Migrating enterprise apps stuck on legacy technologies</title><link>https://agostonbarna.github.io/posts/migrating-enterprise-apps-stuck-on-legacy-technologies/</link><pubDate>Sun, 30 Jun 2024 00:00:00 +0000</pubDate><guid>https://agostonbarna.github.io/posts/migrating-enterprise-apps-stuck-on-legacy-technologies/</guid><description>&lt;p>Enterprise applications often have a hefty and complex code base, mission-critical functionality, and a constant influx of feature demands that can result in a slower pace of dependency updates and a tendency to lag behind. This situation can worsen over time, as certain high-profile dependencies become outdated or discontinued, preventing the update of interlocked dependencies and leading to a cascade of technological stagnation. Eventually, this can reach a critical point, requiring big bang migrations to break free from the constraints of problematic legacy technologies.&lt;/p></description></item><item><title>LLMs for utilizing powerful CLI tools with less effort</title><link>https://agostonbarna.github.io/posts/llms-for-utilizing-powerful-cli-tools-with-less-effort/</link><pubDate>Sat, 02 Mar 2024 00:00:00 +0000</pubDate><guid>https://agostonbarna.github.io/posts/llms-for-utilizing-powerful-cli-tools-with-less-effort/</guid><description>&lt;p>Some of the CLI tools I also mentioned my &lt;a href="../programmatic-data-crunching-with-cli-tools/" >previous blog post&lt;/a> such as &lt;code>jq&lt;/code> and &lt;code>awk&lt;/code> used to take a while to pick up in the past due to their special query syntax and peculiar logic. I was curious about how &lt;a href="https://en.wikipedia.org/wiki/Large_language_model" class="external-link" target="_blank" rel="noopener">LLMs (Large Language Models)&lt;/a> such as ChatGPT (GPT-3.5 and GPT-4) and Gemini (1.0 Pro and 1.0 Ultra) would measure up for tasks like generating and explaining scripts using these tools, so I put them to a little test.&lt;/p>
&lt;p>&lt;strong>NOTE:&lt;/strong> Take the observations and comparison below with a grain of salt, as this test focuses on a specific use-case, it covers only a few tasks using a small set of data processing CLI tools, and uses the particular LLM models that were available to me as of writing.&lt;/p></description></item><item><title>Programmatic data crunching with CLI tools</title><link>https://agostonbarna.github.io/posts/programmatic-data-crunching-with-cli-tools/</link><pubDate>Mon, 26 Feb 2024 00:00:00 +0000</pubDate><guid>https://agostonbarna.github.io/posts/programmatic-data-crunching-with-cli-tools/</guid><description>&lt;p>As a software engineer we often need to closely examine the data we work with. To name a few examples:&lt;/p>
&lt;ul>
&lt;li>We need to implement a new feature that consumes an external service, but the quality of the API documentation can vary, and it may not always provide a comprehensive overview of the structure of the data, nor give a complete picture of the actual data it holds. So it may be necessary to analyze the data in the API responses before we implement the client-side logic to avoid surprises when going live.&lt;/li>
&lt;li>We are debugging a problem that requires querying and analyzing large amounts of data (e.g. APIs, databases, log files) to identify the culprit.&lt;/li>
&lt;li>We are preparing a complex migration that significantly alter the structure of the data. Our goal is to automate the process as much as possible, and verify that no data is lost in the end.&lt;/li>
&lt;li>We get a request to crunch some data from a system and generate reports out of it (e.g. for the PM, product owners, or customer).&lt;/li>
&lt;/ul></description></item></channel></rss>